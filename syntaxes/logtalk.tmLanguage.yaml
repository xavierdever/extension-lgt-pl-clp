comment: "This Source Code Form is subject to the terms of the Mozilla Public License,\nv. 2.0. If a copy of the MPL was not distributed with this file, You can obtain\none at http://mozilla.org/MPL/2.0/."
name: Logtalk
scopeName: source.logtalk
fileTypes: [pi]
patterns:
  -
    include: '#comments'
  -
    name: meta.predicate.body.logtalk
    begin: '(?<=(=>))\s*'
    beginCaptures:
      '1': 
        name: keyword.control.predicate.bodybegin.logtalk
    end: '(\.)(?!(\s*\d|\.|\w))'
    endCaptures:
      '1': 
        name: keyword.control.predicate.bodyend.logtalk
    patterns:
      - include: '#comments'
      - include: '#variable'
      - include: '#constants'
      - include: '#builtin'
      - include: '#controlandkeywords'
      - include: '#atom'
  -
    name: meta.predicate.head.logtalk
    begin: '^\s*([a-z][a-zA-Z0-9_]*)(\(?)(?=.*(:-).*)'
    beginCaptures:
      '1':
        name: entity.name.function.predicate.logtalk
      '2':
        name: punctuation.definition.parameters.begin
    end: '((\)?))\s*(:-)'
    endCaptures:
      '1':
        name: punctuation.definition.parameters.end
      '3':
        name: keyword.control.predicate.bodybegin.logtalk
    patterns:
      -
        include: '#atom'
      -
        include: '#variable'
      -
        include: '#constants'
  - name: meta.fact.logtalk
    begin: '^\s*([a-z][a-zA-Z0-9_]*)(\(?)(?!.*(\??:-).*)'
    beginCaptures:
      '1': {name: entity.name.predicate.fact.logtalk}
      '2': {name: punctuation.definition.parameters.begin}
    end: ((\)?))\s*(\.)(?!\d+)
    endCaptures:
      '1': {name: punctuation.definition.parameters.end}
      '3': {name: keyword.control.fact.end.logtalk}
    patterns:
    - include: '#atom'
    - include: '#variable'
    - include: '#constants'
repository:
  builtin:
    patterns:
      -
        name: keyword.other
        match: \b(alias|built_in|category|coinductive|discontiguous|dynamic|elif|else|encoding|end_category|end_object|end_protocol|endif|if|include|info|initialization|meta_non_terminal|meta_predicate|mode|multifile|object|op|private|protected|protocol|public|set_logtalk_flag|synchronized|threaded|use_module|uses)\b
      -
        name: support.function.builtin.logtalk
        match: \b(abolish|after|ask_question|asserta|assertz|bagof|before|call|call|catch|clause|coinductive_success_hook|context|current_op|current_predicate|eos/|expand_goal|expand_term|findall|findall|forall|forward|goal_expansion|ignore|message_hook|message_prefix_stream|message_tokens/|once|parameter|phrase|phrase|phrase/|predicate_property|print_message|print_message_token|print_message_tokens|question_hook|question_prompt_stream|retract|retractall|self|sender|setof|term_expansion|this|throw)\b
  comments:
    patterns:
      -
        name: comment.line.percent-sign.logtalk
        match: '%.*'
      -
        name: comment.block.logtalk
        begin: '/\*'
        end: '\*/'
        captures: {'0': {name: punctuation.definition.comment.logtalk}}
  constants:
    patterns:
      -
        name: constant.numeric.integer.logtalk
        match: '(?<![a-zA-Z]|/)(\d+|(\d+\.\d+))'
      -
        name: string.quoted.double.logtalk
        match: '".*?"'
  atom:
    patterns:
      -
        name: constant.other.atom.simple.logtalk
        match: '(?<![a-zA-Z0-9_])[a-z][a-zA-Z0-9_]*(?!\s*\(|[a-zA-Z0-9_])'
      -
        name: constant.other.atom.quoted.logtalk
        match: '''.*?'''
      -
        name: constant.other.atom.emptylist.logtalk
        match: '\[\]'
  controlandkeywords:
    patterns:
      -
        name: keyword.operator.logtalk
        match: '(=|\!=|>|>=|<|<=|=<|\.\.|\!|,|;|:|::|\.|\. |=>|\?=>|==|!==|:=|\||\$|@|/\|\/|~|\^|<<|>>|\+|\-|\*|\*\*|/|/>|/<|\^|#=|#\!=|#>|#>=|#<|#<=|#=<|#/\|#\/|#~|#\^|#=>|#<=>|@>|@>=|@<|@<=|@=<)'
  variable:
    patterns:
      -
        name: variable.parameter.uppercase.logtalk
        match: '(?<![a-zA-Z0-9_])[A-Z][a-zA-Z0-9_]*'
      -
        name: variable.language.anonymous.logtalk
        match: '(?<!\w)_'
